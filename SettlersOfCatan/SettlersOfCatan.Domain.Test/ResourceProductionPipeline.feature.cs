// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SettlersOfCatan.Domain.Test
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ResourceProductionPipelineFeature : Xunit.IClassFixture<ResourceProductionPipelineFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ResourceProductionPipeline.feature"
#line hidden
        
        public ResourceProductionPipelineFeature(ResourceProductionPipelineFeature.FixtureData fixtureData, InternalSpecFlow.XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ResourceProductionPipeline", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Producing resource to the player without any resources")]
        [Xunit.TraitAttribute("FeatureTitle", "ResourceProductionPipeline")]
        [Xunit.TraitAttribute("Description", "Producing resource to the player without any resources")]
        [Xunit.TraitAttribute("Category", "ProducingResource")]
        public virtual void ProducingResourceToThePlayerWithoutAnyResources()
        {
            string[] tagsOfScenario = new string[] {
                    "ProducingResource"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Producing resource to the player without any resources", null, new string[] {
                        "ProducingResource"});
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Color"});
                table1.AddRow(new string[] {
                            "Sam",
                            "Red"});
#line 8
 testRunner.Given("a player", ((string)(null)), table1, "Given ");
#line hidden
#line 11
 testRunner.And("without any resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And("a village owner by the given player", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "TerrainType"});
                table2.AddRow(new string[] {
                            "Hills"});
#line 13
 testRunner.And("a terrainType", ((string)(null)), table2, "And ");
#line hidden
#line 16
 testRunner.When("the ProduceResource method is being called with the given TerrainType on the vill" +
                        "age", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "ResourceType",
                            "Amount"});
                table3.AddRow(new string[] {
                            "Brick",
                            "1"});
#line 17
 testRunner.Then("should be added to the player\'s resources.", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Producing resource to the player with some resources")]
        [Xunit.TraitAttribute("FeatureTitle", "ResourceProductionPipeline")]
        [Xunit.TraitAttribute("Description", "Producing resource to the player with some resources")]
        [Xunit.TraitAttribute("Category", "ProducingResource")]
        public virtual void ProducingResourceToThePlayerWithSomeResources()
        {
            string[] tagsOfScenario = new string[] {
                    "ProducingResource"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Producing resource to the player with some resources", null, new string[] {
                        "ProducingResource"});
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Color"});
                table4.AddRow(new string[] {
                            "Sam",
                            "Red"});
#line 23
 testRunner.Given("a player", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table5.AddRow(new string[] {
                            "Grain",
                            "3"});
                table5.AddRow(new string[] {
                            "Wool",
                            "4"});
                table5.AddRow(new string[] {
                            "Lumber",
                            "6"});
#line 26
 testRunner.And("some resources", ((string)(null)), table5, "And ");
#line hidden
#line 31
 testRunner.And("a village owner by the given player", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "TerrainType"});
                table6.AddRow(new string[] {
                            "Hills"});
#line 32
 testRunner.And("a terrainType", ((string)(null)), table6, "And ");
#line hidden
#line 35
 testRunner.When("the ProduceResource method is being called with the given TerrainType on the vill" +
                        "age", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "ResourceType",
                            "Amount"});
                table7.AddRow(new string[] {
                            "Grain",
                            "3"});
                table7.AddRow(new string[] {
                            "Wool",
                            "4"});
                table7.AddRow(new string[] {
                            "Lumber",
                            "6"});
                table7.AddRow(new string[] {
                            "Brick",
                            "1"});
#line 36
 testRunner.Then("the player should have the following resources", ((string)(null)), table7, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ResourceProductionPipelineFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ResourceProductionPipelineFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
